{
  "version": 3,
  "sources": ["../../three/examples/jsm/nodes/core/constants.js", "../../three/examples/jsm/nodes/core/NodeUtils.js", "../../three/examples/jsm/nodes/core/Node.js", "../../three/examples/jsm/nodes/core/TempNode.js", "../../three/examples/jsm/nodes/utils/ArrayElementNode.js", "../../three/examples/jsm/nodes/utils/ConvertNode.js", "../../three/examples/jsm/nodes/utils/JoinNode.js", "../../three/examples/jsm/nodes/utils/SplitNode.js", "../../three/examples/jsm/nodes/utils/SetNode.js", "../../three/examples/jsm/nodes/core/InputNode.js", "../../three/examples/jsm/nodes/core/ConstNode.js", "../../three/examples/jsm/nodes/shadernode/ShaderNode.js", "../../three/examples/jsm/nodes/math/OperatorNode.js", "../../three/examples/jsm/nodes/math/MathNode.js"],
  "sourcesContent": ["export const NodeShaderStage = {\r\n\tVERTEX: 'vertex',\r\n\tFRAGMENT: 'fragment'\r\n};\r\n\r\nexport const NodeUpdateType = {\r\n\tNONE: 'none',\r\n\tFRAME: 'frame',\r\n\tRENDER: 'render',\r\n\tOBJECT: 'object'\r\n};\r\n\r\nexport const NodeType = {\r\n\tBOOLEAN: 'bool',\r\n\tINTEGER: 'int',\r\n\tFLOAT: 'float',\r\n\tVECTOR2: 'vec2',\r\n\tVECTOR3: 'vec3',\r\n\tVECTOR4: 'vec4',\r\n\tMATRIX2: 'mat2',\r\n\tMATRIX3: 'mat3',\r\n\tMATRIX4: 'mat4'\r\n};\r\n\r\nexport const defaultShaderStages = [ 'fragment', 'vertex' ];\r\nexport const defaultBuildStages = [ 'setup', 'analyze', 'generate' ];\r\nexport const shaderStages = [ ...defaultShaderStages, 'compute' ];\r\nexport const vectorComponents = [ 'x', 'y', 'z', 'w' ];\r\n", "import { Color, Matrix3, Matrix4, Vector2, Vector3, Vector4 } from 'three';\r\n\r\nexport function getCacheKey( object, force = false ) {\r\n\r\n\tlet cacheKey = '{';\r\n\r\n\tif ( object.isNode === true ) {\r\n\r\n\t\tcacheKey += object.id;\r\n\r\n\t}\r\n\r\n\tfor ( const { property, childNode } of getNodeChildren( object ) ) {\r\n\r\n\t\tcacheKey += ',' + property.slice( 0, - 4 ) + ':' + childNode.getCacheKey( force );\r\n\r\n\t}\r\n\r\n\tcacheKey += '}';\r\n\r\n\treturn cacheKey;\r\n\r\n}\r\n\r\nexport function* getNodeChildren( node, toJSON = false ) {\r\n\r\n\tfor ( const property in node ) {\r\n\r\n\t\t// Ignore private properties.\r\n\t\tif ( property.startsWith( '_' ) === true ) continue;\r\n\r\n\t\tconst object = node[ property ];\r\n\r\n\t\tif ( Array.isArray( object ) === true ) {\r\n\r\n\t\t\tfor ( let i = 0; i < object.length; i ++ ) {\r\n\r\n\t\t\t\tconst child = object[ i ];\r\n\r\n\t\t\t\tif ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {\r\n\r\n\t\t\t\t\tyield { property, index: i, childNode: child };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object && object.isNode === true ) {\r\n\r\n\t\t\tyield { property, childNode: object };\r\n\r\n\t\t} else if ( typeof object === 'object' ) {\r\n\r\n\t\t\tfor ( const subProperty in object ) {\r\n\r\n\t\t\t\tconst child = object[ subProperty ];\r\n\r\n\t\t\t\tif ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {\r\n\r\n\t\t\t\t\tyield { property, index: subProperty, childNode: child };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function getValueType( value ) {\r\n\r\n\tif ( value === undefined || value === null ) return null;\r\n\r\n\tconst typeOf = typeof value;\r\n\r\n\tif ( value.isNode === true ) {\r\n\r\n\t\treturn 'node';\r\n\r\n\t} else if ( typeOf === 'number' ) {\r\n\r\n\t\treturn 'float';\r\n\r\n\t} else if ( typeOf === 'boolean' ) {\r\n\r\n\t\treturn 'bool';\r\n\r\n\t} else if ( typeOf === 'string' ) {\r\n\r\n\t\treturn 'string';\r\n\r\n\t} else if ( typeOf === 'function' ) {\r\n\r\n\t\treturn 'shader';\r\n\r\n\t} else if ( value.isVector2 === true ) {\r\n\r\n\t\treturn 'vec2';\r\n\r\n\t} else if ( value.isVector3 === true ) {\r\n\r\n\t\treturn 'vec3';\r\n\r\n\t} else if ( value.isVector4 === true ) {\r\n\r\n\t\treturn 'vec4';\r\n\r\n\t} else if ( value.isMatrix3 === true ) {\r\n\r\n\t\treturn 'mat3';\r\n\r\n\t} else if ( value.isMatrix4 === true ) {\r\n\r\n\t\treturn 'mat4';\r\n\r\n\t} else if ( value.isColor === true ) {\r\n\r\n\t\treturn 'color';\r\n\r\n\t} else if ( value instanceof ArrayBuffer ) {\r\n\r\n\t\treturn 'ArrayBuffer';\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n}\r\n\r\nexport function getValueFromType( type, ...params ) {\r\n\r\n\tconst last4 = type ? type.slice( - 4 ) : undefined;\r\n\r\n\tif ( params.length === 1 ) { // ensure same behaviour as in NodeBuilder.format()\r\n\r\n\t\tif ( last4 === 'vec2' ) params = [ params[ 0 ], params[ 0 ] ];\r\n\t\telse if ( last4 === 'vec3' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ] ];\r\n\t\telse if ( last4 === 'vec4' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ], params[ 0 ] ];\r\n\r\n\t}\r\n\r\n\tif ( type === 'color' ) {\r\n\r\n\t\treturn new Color( ...params );\r\n\r\n\t} else if ( last4 === 'vec2' ) {\r\n\r\n\t\treturn new Vector2( ...params );\r\n\r\n\t} else if ( last4 === 'vec3' ) {\r\n\r\n\t\treturn new Vector3( ...params );\r\n\r\n\t} else if ( last4 === 'vec4' ) {\r\n\r\n\t\treturn new Vector4( ...params );\r\n\r\n\t} else if ( last4 === 'mat3' ) {\r\n\r\n\t\treturn new Matrix3( ...params );\r\n\r\n\t} else if ( last4 === 'mat4' ) {\r\n\r\n\t\treturn new Matrix4( ...params );\r\n\r\n\t} else if ( type === 'bool' ) {\r\n\r\n\t\treturn params[ 0 ] || false;\r\n\r\n\t} else if ( ( type === 'float' ) || ( type === 'int' ) || ( type === 'uint' ) ) {\r\n\r\n\t\treturn params[ 0 ] || 0;\r\n\r\n\t} else if ( type === 'string' ) {\r\n\r\n\t\treturn params[ 0 ] || '';\r\n\r\n\t} else if ( type === 'ArrayBuffer' ) {\r\n\r\n\t\treturn base64ToArrayBuffer( params[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n}\r\n\r\nexport function arrayBufferToBase64( arrayBuffer ) {\r\n\r\n\tlet chars = '';\r\n\r\n\tconst array = new Uint8Array( arrayBuffer );\r\n\r\n\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\tchars += String.fromCharCode( array[ i ] );\r\n\r\n\t}\r\n\r\n\treturn btoa( chars );\r\n\r\n}\r\n\r\nexport function base64ToArrayBuffer( base64 ) {\r\n\r\n\treturn Uint8Array.from( atob( base64 ), c => c.charCodeAt( 0 ) ).buffer;\r\n\r\n}\r\n", "import { EventDispatcher } from 'three';\r\nimport { NodeUpdateType } from './constants.js';\r\nimport { getNodeChildren, getCacheKey } from './NodeUtils.js';\r\nimport { MathUtils } from 'three';\r\n\r\nconst NodeClasses = new Map();\r\n\r\nlet _nodeId = 0;\r\n\r\nclass Node extends EventDispatcher {\r\n\r\n\tconstructor( nodeType = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.nodeType = nodeType;\r\n\r\n\t\tthis.updateType = NodeUpdateType.NONE;\r\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis._cacheKey = null;\r\n\t\tthis._cacheKeyVersion = 0;\r\n\r\n\t\tthis.global = false;\r\n\r\n\t\tthis.isNode = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _nodeId ++ } );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tget type() {\r\n\r\n\t\treturn this.constructor.type;\r\n\r\n\t}\r\n\r\n\tonUpdate( callback, updateType ) {\r\n\r\n\t\tthis.updateType = updateType;\r\n\t\tthis.update = callback.bind( this.getSelf() );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tonFrameUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.FRAME );\r\n\r\n\t}\r\n\r\n\tonRenderUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.RENDER );\r\n\r\n\t}\r\n\r\n\tonObjectUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.OBJECT );\r\n\r\n\t}\r\n\r\n\tonReference( callback ) {\r\n\r\n\t\tthis.updateReference = callback.bind( this.getSelf() );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetSelf() {\r\n\r\n\t\t// Returns non-node object.\r\n\r\n\t\treturn this.self || this;\r\n\r\n\t}\r\n\r\n\tupdateReference( /*state*/ ) {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisGlobal( /*builder*/ ) {\r\n\r\n\t\treturn this.global;\r\n\r\n\t}\r\n\r\n\t* getChildren() {\r\n\r\n\t\tfor ( const { childNode } of getNodeChildren( this ) ) {\r\n\r\n\t\t\tyield childNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\ttraverse( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tfor ( const childNode of this.getChildren() ) {\r\n\r\n\t\t\tchildNode.traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetCacheKey( force = false ) {\r\n\r\n\t\tforce = force || this.version !== this._cacheKeyVersion;\r\n\r\n\t\tif ( force === true || this._cacheKey === null ) {\r\n\r\n\t\t\tthis._cacheKey = getCacheKey( this, force );\r\n\t\t\tthis._cacheKeyVersion = this.version;\r\n\r\n\t\t}\r\n\r\n\t\treturn this._cacheKey;\r\n\r\n\t}\r\n\r\n\tgetHash( /*builder*/ ) {\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tgetUpdateType() {\r\n\r\n\t\treturn this.updateType;\r\n\r\n\t}\r\n\r\n\tgetUpdateBeforeType() {\r\n\r\n\t\treturn this.updateBeforeType;\r\n\r\n\t}\r\n\r\n\tgetElementType( builder ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst elementType = builder.getElementType( type );\r\n\r\n\t\treturn elementType;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( nodeProperties.outputNode ) {\r\n\r\n\t\t\treturn nodeProperties.outputNode.getNodeType( builder );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\tgetShared( builder ) {\r\n\r\n\t\tconst hash = this.getHash( builder );\r\n\t\tconst nodeFromHash = builder.getNodeFromHash( hash );\r\n\r\n\t\treturn nodeFromHash || this;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\tlet index = 0;\r\n\r\n\t\tfor ( const childNode of this.getChildren() ) {\r\n\r\n\t\t\tnodeProperties[ 'node' + index ++ ] = childNode;\r\n\r\n\t\t}\r\n\r\n\t\t// return a outputNode if exists\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\tconstruct( builder ) { // @deprecated, r157\r\n\r\n\t\tconsole.warn( 'THREE.Node: construct() is deprecated. Use setup() instead.' );\r\n\r\n\t\treturn this.setup( builder );\r\n\r\n\t}\r\n\r\n\tincreaseUsage( builder ) {\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\t\tnodeData.usageCount = nodeData.usageCount === undefined ? 1 : nodeData.usageCount + 1;\r\n\r\n\t\treturn nodeData.usageCount;\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tconst usageCount = this.increaseUsage( builder );\r\n\r\n\t\tif ( usageCount === 1 ) {\r\n\r\n\t\t\t// node flow children\r\n\r\n\t\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\t\tfor ( const childNode of Object.values( nodeProperties ) ) {\r\n\r\n\t\t\t\tif ( childNode && childNode.isNode === true ) {\r\n\r\n\t\t\t\t\tchildNode.build( builder );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { outputNode } = builder.getNodeProperties( this );\r\n\r\n\t\tif ( outputNode && outputNode.isNode === true ) {\r\n\r\n\t\t\treturn outputNode.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateBefore( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tbuild( builder, output = null ) {\r\n\r\n\t\tconst refNode = this.getShared( builder );\r\n\r\n\t\tif ( this !== refNode ) {\r\n\r\n\t\t\treturn refNode.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.addNode( this );\r\n\t\tbuilder.addChain( this );\r\n\r\n\t\t/* Build stages expected results:\r\n\t\t\t- \"setup\"\t\t-> Node\r\n\t\t\t- \"analyze\"\t\t-> null\r\n\t\t\t- \"generate\"\t-> String\r\n\t\t*/\r\n\t\tlet result = null;\r\n\r\n\t\tconst buildStage = builder.getBuildStage();\r\n\r\n\t\tif ( buildStage === 'setup' ) {\r\n\r\n\t\t\tthis.updateReference( builder );\r\n\r\n\t\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\t\tif ( properties.initialized !== true || builder.context.tempRead === false ) {\r\n\r\n\t\t\t\tconst stackNodesBeforeSetup = builder.stack.nodes.length;\r\n\r\n\t\t\t\tproperties.initialized = true;\r\n\t\t\t\tproperties.outputNode = this.setup( builder );\r\n\r\n\t\t\t\tif ( properties.outputNode !== null && builder.stack.nodes.length !== stackNodesBeforeSetup ) {\r\n\r\n\t\t\t\t\tproperties.outputNode = builder.stack;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( const childNode of Object.values( properties ) ) {\r\n\r\n\t\t\t\t\tif ( childNode && childNode.isNode === true ) {\r\n\r\n\t\t\t\t\t\tchildNode.build( builder );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( buildStage === 'analyze' ) {\r\n\r\n\t\t\tthis.analyze( builder );\r\n\r\n\t\t} else if ( buildStage === 'generate' ) {\r\n\r\n\t\t\tconst isGenerateOnce = this.generate.length === 1;\r\n\r\n\t\t\tif ( isGenerateOnce ) {\r\n\r\n\t\t\t\tconst type = this.getNodeType( builder );\r\n\t\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\t\tresult = nodeData.snippet;\r\n\r\n\t\t\t\tif ( result === undefined /*|| builder.context.tempRead === false*/ ) {\r\n\r\n\t\t\t\t\tresult = this.generate( builder ) || '';\r\n\r\n\t\t\t\t\tnodeData.snippet = result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = builder.format( result, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = this.generate( builder, output ) || '';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.removeChain( this );\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tgetSerializeChildren() {\r\n\r\n\t\treturn getNodeChildren( this );\r\n\r\n\t}\r\n\r\n\tserialize( json ) {\r\n\r\n\t\tconst nodeChildren = this.getSerializeChildren();\r\n\r\n\t\tconst inputNodes = {};\r\n\r\n\t\tfor ( const { property, index, childNode } of nodeChildren ) {\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tif ( inputNodes[ property ] === undefined ) {\r\n\r\n\t\t\t\t\tinputNodes[ property ] = Number.isInteger( index ) ? [] : {};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinputNodes[ property ][ index ] = childNode.toJSON( json.meta ).uuid;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tinputNodes[ property ] = childNode.toJSON( json.meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( inputNodes ).length > 0 ) {\r\n\r\n\t\t\tjson.inputNodes = inputNodes;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdeserialize( json ) {\r\n\r\n\t\tif ( json.inputNodes !== undefined ) {\r\n\r\n\t\t\tconst nodes = json.meta.nodes;\r\n\r\n\t\t\tfor ( const property in json.inputNodes ) {\r\n\r\n\t\t\t\tif ( Array.isArray( json.inputNodes[ property ] ) ) {\r\n\r\n\t\t\t\t\tconst inputArray = [];\r\n\r\n\t\t\t\t\tfor ( const uuid of json.inputNodes[ property ] ) {\r\n\r\n\t\t\t\t\t\tinputArray.push( nodes[ uuid ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis[ property ] = inputArray;\r\n\r\n\t\t\t\t} else if ( typeof json.inputNodes[ property ] === 'object' ) {\r\n\r\n\t\t\t\t\tconst inputObject = {};\r\n\r\n\t\t\t\t\tfor ( const subProperty in json.inputNodes[ property ] ) {\r\n\r\n\t\t\t\t\t\tconst uuid = json.inputNodes[ property ][ subProperty ];\r\n\r\n\t\t\t\t\t\tinputObject[ subProperty ] = nodes[ uuid ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis[ property ] = inputObject;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconst uuid = json.inputNodes[ property ];\r\n\r\n\t\t\t\t\tthis[ property ] = nodes[ uuid ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst { uuid, type } = this;\r\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\r\n\t\tlet data = meta.nodes[ uuid ];\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tdata = {\r\n\t\t\t\tuuid,\r\n\t\t\t\ttype,\r\n\t\t\t\tmeta,\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.6,\r\n\t\t\t\t\ttype: 'Node',\r\n\t\t\t\t\tgenerator: 'Node.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tif ( isRoot !== true ) meta.nodes[ data.uuid ] = data;\r\n\r\n\t\t\tthis.serialize( data );\r\n\r\n\t\t\tdelete data.meta;\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Node;\r\n\r\nexport function addNodeClass( type, nodeClass ) {\r\n\r\n\tif ( typeof nodeClass !== 'function' || ! type ) throw new Error( `Node class ${ type } is not a class` );\r\n\tif ( NodeClasses.has( type ) ) {\r\n\r\n\t\tconsole.warn( `Redefinition of node class ${ type }` );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tNodeClasses.set( type, nodeClass );\r\n\tnodeClass.type = type;\r\n\r\n}\r\n\r\nexport function createNodeFromType( type ) {\r\n\r\n\tconst Class = NodeClasses.get( type );\r\n\r\n\tif ( Class !== undefined ) {\r\n\r\n\t\treturn new Class();\r\n\r\n\t}\r\n\r\n}\r\n", "import Node, { addNodeClass } from './Node.js';\r\n\r\nclass TempNode extends Node {\r\n\r\n\tconstructor( type ) {\r\n\r\n\t\tsuper( type );\r\n\r\n\t\tthis.isTempNode = true;\r\n\r\n\t}\r\n\r\n\thasDependencies( builder ) {\r\n\r\n\t\treturn builder.getDataFromNode( this ).usageCount > 1;\r\n\r\n\t}\r\n\r\n\tbuild( builder, output ) {\r\n\r\n\t\tconst buildStage = builder.getBuildStage();\r\n\r\n\t\tif ( buildStage === 'generate' ) {\r\n\r\n\t\t\tconst type = builder.getVectorType( this.getNodeType( builder, output ) );\r\n\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\tif ( builder.context.tempRead !== false && nodeData.propertyName !== undefined ) {\r\n\r\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\r\n\r\n\t\t\t} else if ( builder.context.tempWrite !== false && type !== 'void' && output !== 'void' && this.hasDependencies( builder ) ) {\r\n\r\n\t\t\t\tconst snippet = super.build( builder, type );\r\n\r\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, null, type );\r\n\t\t\t\tconst propertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}` );\r\n\r\n\t\t\t\tnodeData.snippet = snippet;\r\n\t\t\t\tnodeData.propertyName = propertyName;\r\n\r\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn super.build( builder, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TempNode;\r\n\r\naddNodeClass( 'TempNode', TempNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\n\r\nclass ArrayElementNode extends Node { // @TODO: If extending from TempNode it breaks webgpu_compute\r\n\r\n\tconstructor( node, indexNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.indexNode = indexNode;\r\n\r\n\t\tthis.isArrayElementNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getElementType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst nodeSnippet = this.node.build( builder );\r\n\t\tconst indexSnippet = this.indexNode.build( builder, 'uint' );\r\n\r\n\t\treturn `${nodeSnippet}[ ${indexSnippet} ]`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ArrayElementNode;\r\n\r\naddNodeClass( 'ArrayElementNode', ArrayElementNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\n\r\nclass ConvertNode extends Node {\r\n\r\n\tconstructor( node, convertTo ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.convertTo = convertTo;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst requestType = this.node.getNodeType( builder );\r\n\r\n\t\tlet convertTo = null;\r\n\r\n\t\tfor ( const overloadingType of this.convertTo.split( '|' ) ) {\r\n\r\n\t\t\tif ( convertTo === null || builder.getTypeLength( requestType ) === builder.getTypeLength( overloadingType ) ) {\r\n\r\n\t\t\t\tconvertTo = overloadingType;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn convertTo;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.convertTo = this.convertTo;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.convertTo = data.convertTo;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst node = this.node;\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tconst snippet = node.build( builder, type );\r\n\r\n\t\treturn builder.format( snippet, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ConvertNode;\r\n\r\naddNodeClass( 'ConvertNode', ConvertNode );\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport TempNode from '../core/TempNode.js';\r\n\r\nclass JoinNode extends TempNode {\r\n\r\n\tconstructor( nodes = [], nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.nodes = nodes;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.nodeType !== null ) {\r\n\r\n\t\t\treturn builder.getVectorType( this.nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getTypeFromLength( this.nodes.reduce( ( count, cur ) => count + builder.getTypeLength( cur.getNodeType( builder ) ), 0 ) );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst nodes = this.nodes;\r\n\r\n\t\tconst primitiveType = builder.getComponentType( type );\r\n\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tfor ( const input of nodes ) {\r\n\r\n\t\t\tlet inputSnippet = input.build( builder );\r\n\r\n\t\t\tconst inputPrimitiveType = builder.getComponentType( input.getNodeType( builder ) );\r\n\r\n\t\t\tif ( inputPrimitiveType !== primitiveType ) {\r\n\r\n\t\t\t\tinputSnippet = builder.format( inputSnippet, inputPrimitiveType, primitiveType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsnippetValues.push( inputSnippet );\r\n\r\n\t\t}\r\n\r\n\t\tconst snippet = `${ builder.getType( type ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t\treturn builder.format( snippet, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default JoinNode;\r\n\r\naddNodeClass( 'JoinNode', JoinNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nconst stringVectorComponents = vectorComponents.join( '' );\r\n\r\nclass SplitNode extends Node {\r\n\r\n\tconstructor( node, components = 'x' ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.components = components;\r\n\r\n\t\tthis.isSplitNode = true;\r\n\r\n\t}\r\n\r\n\tgetVectorLength() {\r\n\r\n\t\tlet vectorLength = this.components.length;\r\n\r\n\t\tfor ( const c of this.components ) {\r\n\r\n\t\t\tvectorLength = Math.max( vectorComponents.indexOf( c ) + 1, vectorLength );\r\n\r\n\t\t}\r\n\r\n\t\treturn vectorLength;\r\n\r\n\t}\r\n\r\n\tgetComponentType( builder ) {\r\n\r\n\t\treturn builder.getComponentType( this.node.getNodeType( builder ) );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn builder.getTypeFromLength( this.components.length, this.getComponentType( builder ) );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst node = this.node;\r\n\t\tconst nodeTypeLength = builder.getTypeLength( node.getNodeType( builder ) );\r\n\r\n\t\tlet snippet = null;\r\n\r\n\t\tif ( nodeTypeLength > 1 ) {\r\n\r\n\t\t\tlet type = null;\r\n\r\n\t\t\tconst componentsLength = this.getVectorLength();\r\n\r\n\t\t\tif ( componentsLength >= nodeTypeLength ) {\r\n\r\n\t\t\t\t// needed expand the input node\r\n\r\n\t\t\t\ttype = builder.getTypeFromLength( this.getVectorLength(), this.getComponentType( builder ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst nodeSnippet = node.build( builder, type );\r\n\r\n\t\t\tif ( this.components.length === nodeTypeLength && this.components === stringVectorComponents.slice( 0, this.components.length ) ) {\r\n\r\n\t\t\t\t// unnecessary swizzle\r\n\r\n\t\t\t\tsnippet = builder.format( nodeSnippet, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippet = builder.format( `${nodeSnippet}.${this.components}`, this.getNodeType( builder ), output );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// ignore .components if .node returns float/integer\r\n\r\n\t\t\tsnippet = node.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.components = this.components;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.components = data.components;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SplitNode;\r\n\r\naddNodeClass( 'SplitNode', SplitNode );\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport TempNode from '../core/TempNode.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nclass SetNode extends TempNode {\r\n\r\n\tconstructor( sourceNode, components, targetNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.sourceNode = sourceNode;\r\n\t\tthis.components = components;\r\n\t\tthis.targetNode = targetNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.sourceNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { sourceNode, components, targetNode } = this;\r\n\r\n\t\tconst sourceType = this.getNodeType( builder );\r\n\t\tconst targetType = builder.getTypeFromLength( components.length );\r\n\r\n\t\tconst targetSnippet = targetNode.build( builder, targetType );\r\n\t\tconst sourceSnippet = sourceNode.build( builder, sourceType );\r\n\r\n\t\tconst length = builder.getTypeLength( sourceType );\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tconst component = vectorComponents[ i ];\r\n\r\n\t\t\tif ( component === components[ 0 ] ) {\r\n\r\n\t\t\t\tsnippetValues.push( targetSnippet );\r\n\r\n\t\t\t\ti += components.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippetValues.push( sourceSnippet + '.' + component );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SetNode;\r\n\r\naddNodeClass( 'SetNode', SetNode );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { getValueType, getValueFromType, arrayBufferToBase64 } from './NodeUtils.js';\r\n\r\nclass InputNode extends Node {\r\n\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.isInputNode = true;\r\n\r\n\t\tthis.value = value;\r\n\t\tthis.precision = null;\r\n\r\n\t}\r\n\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\tif ( this.nodeType === null ) {\r\n\r\n\t\t\treturn getValueType( this.value );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\tgetInputType( builder ) {\r\n\r\n\t\treturn this.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetPrecision( precision ) {\r\n\r\n\t\tthis.precision = precision;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.value = this.value;\r\n\r\n\t\tif ( this.value && this.value.toArray ) data.value = this.value.toArray();\r\n\r\n\t\tdata.valueType = getValueType( this.value );\r\n\t\tdata.nodeType = this.nodeType;\r\n\r\n\t\tif ( data.valueType === 'ArrayBuffer' ) data.value = arrayBufferToBase64( data.value );\r\n\r\n\t\tdata.precision = this.precision;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.nodeType = data.nodeType;\r\n\t\tthis.value = Array.isArray( data.value ) ? getValueFromType( data.valueType, ...data.value ) : data.value;\r\n\r\n\t\tthis.precision = data.precision || null;\r\n\r\n\t\tif ( this.value && this.value.fromArray ) this.value = this.value.fromArray( data.value );\r\n\r\n\t}\r\n\r\n\tgenerate( /*builder, output*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default InputNode;\r\n\r\naddNodeClass( 'InputNode', InputNode );\r\n", "import InputNode from './InputNode.js';\r\nimport { addNodeClass } from './Node.js';\r\n\r\nclass ConstNode extends InputNode {\r\n\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( value, nodeType );\r\n\r\n\t\tthis.isConstNode = true;\r\n\r\n\t}\r\n\r\n\tgenerateConst( builder ) {\r\n\r\n\t\treturn builder.generateConst( this.getNodeType( builder ), this.value );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\treturn builder.format( this.generateConst( builder ), type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ConstNode;\r\n\r\naddNodeClass( 'ConstNode', ConstNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\nimport ConvertNode from '../utils/ConvertNode.js';\r\nimport JoinNode from '../utils/JoinNode.js';\r\nimport SplitNode from '../utils/SplitNode.js';\r\nimport SetNode from '../utils/SetNode.js';\r\nimport ConstNode from '../core/ConstNode.js';\r\nimport { getValueFromType, getValueType } from '../core/NodeUtils.js';\r\n\r\n//\r\n\r\nlet currentStack = null;\r\n\r\nconst NodeElements = new Map(); // @TODO: Currently only a few nodes are added, probably also add others\r\n\r\nexport function addNodeElement( name, nodeElement ) {\r\n\r\n\tif ( NodeElements.has( name ) ) {\r\n\r\n\t\tconsole.warn( `Redefinition of node element ${ name }` );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tif ( typeof nodeElement !== 'function' ) throw new Error( `Node element ${ name } is not a function` );\r\n\r\n\tNodeElements.set( name, nodeElement );\r\n\r\n}\r\n\r\nconst parseSwizzle = ( props ) => props.replace( /r|s/g, 'x' ).replace( /g|t/g, 'y' ).replace( /b|p/g, 'z' ).replace( /a|q/g, 'w' );\r\n\r\nconst shaderNodeHandler = {\r\n\r\n\tsetup( NodeClosure, params ) {\r\n\r\n\t\tconst inputs = params.shift();\r\n\r\n\t\treturn NodeClosure( nodeObjects( inputs ), ...params );\r\n\r\n\t},\r\n\r\n\tget( node, prop, nodeObj ) {\r\n\r\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\r\n\r\n\t\t\tif ( node.isStackNode !== true && prop === 'assign' ) {\r\n\r\n\t\t\t\treturn ( ...params ) => {\r\n\r\n\t\t\t\t\tcurrentStack.assign( nodeObj, ...params );\r\n\r\n\t\t\t\t\treturn nodeObj;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( NodeElements.has( prop ) ) {\r\n\r\n\t\t\t\tconst nodeElement = NodeElements.get( prop );\r\n\r\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.add( nodeElement( ...params ) ) : ( ...params ) => nodeElement( nodeObj, ...params );\r\n\r\n\t\t\t} else if ( prop === 'self' ) {\r\n\r\n\t\t\t\treturn node;\r\n\r\n\t\t\t} else if ( prop.endsWith( 'Assign' ) && NodeElements.has( prop.slice( 0, prop.length - 'Assign'.length ) ) ) {\r\n\r\n\t\t\t\tconst nodeElement = NodeElements.get( prop.slice( 0, prop.length - 'Assign'.length ) );\r\n\r\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.assign( params[ 0 ], nodeElement( ...params ) ) : ( ...params ) => nodeObj.assign( nodeElement( nodeObj, ...params ) );\r\n\r\n\t\t\t} else if ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// accessing properties ( swizzle )\r\n\r\n\t\t\t\tprop = parseSwizzle( prop );\r\n\r\n\t\t\t\treturn nodeObject( new SplitNode( nodeObj, prop ) );\r\n\r\n\t\t\t} else if ( /^set[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// set properties ( swizzle )\r\n\r\n\t\t\t\tprop = parseSwizzle( prop.slice( 3 ).toLowerCase() );\r\n\r\n\t\t\t\t// sort to xyzw sequence\r\n\r\n\t\t\t\tprop = prop.split( '' ).sort().join( '' );\r\n\r\n\t\t\t\treturn ( value ) => nodeObject( new SetNode( node, prop, value ) );\r\n\r\n\t\t\t} else if ( prop === 'width' || prop === 'height' || prop === 'depth' ) {\r\n\r\n\t\t\t\t// accessing property\r\n\r\n\t\t\t\tif ( prop === 'width' ) prop = 'x';\r\n\t\t\t\telse if ( prop === 'height' ) prop = 'y';\r\n\t\t\t\telse if ( prop === 'depth' ) prop = 'z';\r\n\r\n\t\t\t\treturn nodeObject( new SplitNode( node, prop ) );\r\n\r\n\t\t\t} else if ( /^\\d+$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// accessing array\r\n\r\n\t\t\t\treturn nodeObject( new ArrayElementNode( nodeObj, new ConstNode( Number( prop ), 'uint' ) ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Reflect.get( node, prop, nodeObj );\r\n\r\n\t},\r\n\r\n\tset( node, prop, value, nodeObj ) {\r\n\r\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\r\n\r\n\t\t\t// setting properties\r\n\r\n\t\t\tif ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true || prop === 'width' || prop === 'height' || prop === 'depth' || /^\\d+$/.test( prop ) === true ) {\r\n\r\n\t\t\t\tnodeObj[ prop ].assign( value );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Reflect.set( node, prop, value, nodeObj );\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst nodeObjectsCacheMap = new WeakMap();\r\nconst nodeBuilderFunctionsCacheMap = new WeakMap();\r\n\r\nconst ShaderNodeObject = function ( obj, altType = null ) {\r\n\r\n\tconst type = getValueType( obj );\r\n\r\n\tif ( type === 'node' ) {\r\n\r\n\t\tlet nodeObject = nodeObjectsCacheMap.get( obj );\r\n\r\n\t\tif ( nodeObject === undefined ) {\r\n\r\n\t\t\tnodeObject = new Proxy( obj, shaderNodeHandler );\r\n\r\n\t\t\tnodeObjectsCacheMap.set( obj, nodeObject );\r\n\t\t\tnodeObjectsCacheMap.set( nodeObject, nodeObject );\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeObject;\r\n\r\n\t} else if ( ( altType === null && ( type === 'float' || type === 'boolean' ) ) || ( type && type !== 'shader' && type !== 'string' ) ) {\r\n\r\n\t\treturn nodeObject( getConstNode( obj, altType ) );\r\n\r\n\t} else if ( type === 'shader' ) {\r\n\r\n\t\treturn tslFn( obj );\r\n\r\n\t}\r\n\r\n\treturn obj;\r\n\r\n};\r\n\r\nconst ShaderNodeObjects = function ( objects, altType = null ) {\r\n\r\n\tfor ( const name in objects ) {\r\n\r\n\t\tobjects[ name ] = nodeObject( objects[ name ], altType );\r\n\r\n\t}\r\n\r\n\treturn objects;\r\n\r\n};\r\n\r\nconst ShaderNodeArray = function ( array, altType = null ) {\r\n\r\n\tconst len = array.length;\r\n\r\n\tfor ( let i = 0; i < len; i ++ ) {\r\n\r\n\t\tarray[ i ] = nodeObject( array[ i ], altType );\r\n\r\n\t}\r\n\r\n\treturn array;\r\n\r\n};\r\n\r\nconst ShaderNodeProxy = function ( NodeClass, scope = null, factor = null, settings = null ) {\r\n\r\n\tconst assignNode = ( node ) => nodeObject( settings !== null ? Object.assign( node, settings ) : node );\r\n\r\n\tif ( scope === null ) {\r\n\r\n\t\treturn ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( ...nodeArray( params ) ) );\r\n\r\n\t\t};\r\n\r\n\t} else if ( factor !== null ) {\r\n\r\n\t\tfactor = nodeObject( factor );\r\n\r\n\t\treturn ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( params ), factor ) );\r\n\r\n\t\t};\r\n\r\n\t} else {\r\n\r\n\t\treturn ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( params ) ) );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst ShaderNodeImmutable = function ( NodeClass, ...params ) {\r\n\r\n\treturn nodeObject( new NodeClass( ...nodeArray( params ) ) );\r\n\r\n};\r\n\r\nclass ShaderCallNodeInternal extends Node {\r\n\r\n\tconstructor( shaderNode, inputNodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.shaderNode = shaderNode;\r\n\t\tthis.inputNodes = inputNodes;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( properties.outputNode === null ) {\r\n\r\n\t\t\tproperties.outputNode = this.setupOutput( builder );\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.outputNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tcall( builder ) {\r\n\r\n\t\tconst { shaderNode, inputNodes } = this;\r\n\r\n\t\tif ( shaderNode.layout ) {\r\n\r\n\t\t\tlet functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get( builder.constructor );\r\n\r\n\t\t\tif ( functionNodesCacheMap === undefined ) {\r\n\r\n\t\t\t\tfunctionNodesCacheMap = new WeakMap();\r\n\r\n\t\t\t\tnodeBuilderFunctionsCacheMap.set( builder.constructor, functionNodesCacheMap );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet functionNode = functionNodesCacheMap.get( shaderNode );\r\n\r\n\t\t\tif ( functionNode === undefined ) {\r\n\r\n\t\t\t\tfunctionNode = nodeObject( builder.buildFunctionNode( shaderNode ) );\r\n\r\n\t\t\t\tfunctionNodesCacheMap.set( shaderNode, functionNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( builder.currentFunctionNode !== null ) {\r\n\r\n\t\t\t\tbuilder.currentFunctionNode.includes.push( functionNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn nodeObject( functionNode.call( inputNodes ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst jsFunc = shaderNode.jsFunc;\r\n\t\tconst outputNode = inputNodes !== null ? jsFunc( inputNodes, builder.stack, builder ) : jsFunc( builder.stack, builder );\r\n\r\n\t\treturn nodeObject( outputNode );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { outputNode } = builder.getNodeProperties( this );\r\n\r\n\t\treturn outputNode || this.setupOutput( builder );\r\n\r\n\t}\r\n\r\n\tsetupOutput( builder ) {\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tbuilder.stack.outputNode = this.call( builder );\r\n\r\n\t\treturn builder.removeStack();\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { outputNode } = builder.getNodeProperties( this );\r\n\r\n\t\tif ( outputNode === null ) {\r\n\r\n\t\t\t// TSL: It's recommended to use `tslFn` in setup() pass.\r\n\r\n\t\t\treturn this.call( builder ).build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn super.generate( builder, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ShaderNodeInternal extends Node {\r\n\r\n\tconstructor( jsFunc ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.jsFunc = jsFunc;\r\n\t\tthis.layout = null;\r\n\r\n\t}\r\n\r\n\tget isArrayInput() {\r\n\r\n\t\treturn /^\\((\\s+)?\\[/.test( this.jsFunc.toString() );\r\n\r\n\t}\r\n\r\n\tsetLayout( layout ) {\r\n\r\n\t\tthis.layout = layout;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcall( inputs = null ) {\r\n\r\n\t\tnodeObjects( inputs );\r\n\r\n\t\treturn nodeObject( new ShaderCallNodeInternal( this, inputs ) );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.call();\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst bools = [ false, true ];\r\nconst uints = [ 0, 1, 2, 3 ];\r\nconst ints = [ - 1, - 2 ];\r\nconst floats = [ 0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / ( Math.PI * 2 ), Math.PI / 2 ];\r\n\r\nconst boolsCacheMap = new Map();\r\nfor ( const bool of bools ) boolsCacheMap.set( bool, new ConstNode( bool ) );\r\n\r\nconst uintsCacheMap = new Map();\r\nfor ( const uint of uints ) uintsCacheMap.set( uint, new ConstNode( uint, 'uint' ) );\r\n\r\nconst intsCacheMap = new Map( [ ...uintsCacheMap ].map( el => new ConstNode( el.value, 'int' ) ) );\r\nfor ( const int of ints ) intsCacheMap.set( int, new ConstNode( int, 'int' ) );\r\n\r\nconst floatsCacheMap = new Map( [ ...intsCacheMap ].map( el => new ConstNode( el.value ) ) );\r\nfor ( const float of floats ) floatsCacheMap.set( float, new ConstNode( float ) );\r\nfor ( const float of floats ) floatsCacheMap.set( - float, new ConstNode( - float ) );\r\n\r\nconst cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };\r\n\r\nconst constNodesCacheMap = new Map( [ ...boolsCacheMap, ...floatsCacheMap ] );\r\n\r\nconst getConstNode = ( value, type ) => {\r\n\r\n\tif ( constNodesCacheMap.has( value ) ) {\r\n\r\n\t\treturn constNodesCacheMap.get( value );\r\n\r\n\t} else if ( value.isNode === true ) {\r\n\r\n\t\treturn value;\r\n\r\n\t} else {\r\n\r\n\t\treturn new ConstNode( value, type );\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst safeGetNodeType = ( node ) => {\r\n\r\n\ttry {\r\n\r\n\t\treturn node.getNodeType();\r\n\r\n\t} catch ( _ ) {\r\n\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst ConvertType = function ( type, cacheMap = null ) {\r\n\r\n\treturn ( ...params ) => {\r\n\r\n\t\tif ( params.length === 0 || ( ! [ 'bool', 'float', 'int', 'uint' ].includes( type ) && params.every( param => typeof param !== 'object' ) ) ) {\r\n\r\n\t\t\tparams = [ getValueFromType( type, ...params ) ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( params.length === 1 && cacheMap !== null && cacheMap.has( params[ 0 ] ) ) {\r\n\r\n\t\t\treturn nodeObject( cacheMap.get( params[ 0 ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( params.length === 1 ) {\r\n\r\n\t\t\tconst node = getConstNode( params[ 0 ], type );\r\n\t\t\tif ( safeGetNodeType( node ) === type ) return nodeObject( node );\r\n\t\t\treturn nodeObject( new ConvertNode( node, type ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst nodes = params.map( param => getConstNode( param ) );\r\n\t\treturn nodeObject( new JoinNode( nodes, type ) );\r\n\r\n\t};\r\n\r\n};\r\n\r\n// exports\r\n\r\nexport const defined = ( value ) => value && value.value;\r\n\r\n// utils\r\n\r\nexport const getConstNodeType = ( value ) => ( value !== undefined && value !== null ) ? ( value.nodeType || value.convertTo || ( typeof value === 'string' ? value : null ) ) : null;\r\n\r\n// shader node base\r\n\r\nexport function ShaderNode( jsFunc ) {\r\n\r\n\treturn new Proxy( new ShaderNodeInternal( jsFunc ), shaderNodeHandler );\r\n\r\n}\r\n\r\nexport const nodeObject = ( val, altType = null ) => /* new */ ShaderNodeObject( val, altType );\r\nexport const nodeObjects = ( val, altType = null ) => new ShaderNodeObjects( val, altType );\r\nexport const nodeArray = ( val, altType = null ) => new ShaderNodeArray( val, altType );\r\nexport const nodeProxy = ( ...params ) => new ShaderNodeProxy( ...params );\r\nexport const nodeImmutable = ( ...params ) => new ShaderNodeImmutable( ...params );\r\n\r\nexport const tslFn = ( jsFunc ) => {\r\n\r\n\tconst shaderNode = new ShaderNode( jsFunc );\r\n\r\n\tconst fn = ( ...params ) => {\r\n\r\n\t\tlet inputs;\r\n\r\n\t\tnodeObjects( params );\r\n\r\n\t\tif ( params[ 0 ] && params[ 0 ].isNode ) {\r\n\r\n\t\t\tinputs = [ ...params ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tinputs = params[ 0 ];\r\n\r\n\t\t}\r\n\r\n\t\treturn shaderNode.call( inputs );\r\n\r\n\t};\r\n\r\n\tfn.shaderNode = shaderNode;\r\n\tfn.setLayout = ( layout ) => {\r\n\r\n\t\tshaderNode.setLayout( layout );\r\n\r\n\t\treturn fn;\r\n\r\n\t};\r\n\r\n\treturn fn;\r\n\r\n};\r\n\r\naddNodeClass( 'ShaderNode', ShaderNode );\r\n\r\n//\r\n\r\naddNodeElement( 'toGlobal', ( node ) => {\r\n\r\n\tnode.global = true;\r\n\r\n\treturn node;\r\n\r\n} );\r\n\r\n//\r\n\r\nexport const setCurrentStack = ( stack ) => {\r\n\r\n\tif ( currentStack === stack ) {\r\n\r\n\t\t//throw new Error( 'Stack already defined.' );\r\n\r\n\t}\r\n\r\n\tcurrentStack = stack;\r\n\r\n};\r\n\r\nexport const getCurrentStack = () => currentStack;\r\n\r\nexport const If = ( ...params ) => currentStack.if( ...params );\r\n\r\nexport function append( node ) {\r\n\r\n\tif ( currentStack ) currentStack.add( node );\r\n\r\n\treturn node;\r\n\r\n}\r\n\r\naddNodeElement( 'append', append );\r\n\r\n// types\r\n// @TODO: Maybe export from ConstNode.js?\r\n\r\nexport const color = new ConvertType( 'color' );\r\n\r\nexport const float = new ConvertType( 'float', cacheMaps.float );\r\nexport const int = new ConvertType( 'int', cacheMaps.ints );\r\nexport const uint = new ConvertType( 'uint', cacheMaps.uint );\r\nexport const bool = new ConvertType( 'bool', cacheMaps.bool );\r\n\r\nexport const vec2 = new ConvertType( 'vec2' );\r\nexport const ivec2 = new ConvertType( 'ivec2' );\r\nexport const uvec2 = new ConvertType( 'uvec2' );\r\nexport const bvec2 = new ConvertType( 'bvec2' );\r\n\r\nexport const vec3 = new ConvertType( 'vec3' );\r\nexport const ivec3 = new ConvertType( 'ivec3' );\r\nexport const uvec3 = new ConvertType( 'uvec3' );\r\nexport const bvec3 = new ConvertType( 'bvec3' );\r\n\r\nexport const vec4 = new ConvertType( 'vec4' );\r\nexport const ivec4 = new ConvertType( 'ivec4' );\r\nexport const uvec4 = new ConvertType( 'uvec4' );\r\nexport const bvec4 = new ConvertType( 'bvec4' );\r\n\r\nexport const mat2 = new ConvertType( 'mat2' );\r\nexport const imat2 = new ConvertType( 'imat2' );\r\nexport const umat2 = new ConvertType( 'umat2' );\r\nexport const bmat2 = new ConvertType( 'bmat2' );\r\n\r\nexport const mat3 = new ConvertType( 'mat3' );\r\nexport const imat3 = new ConvertType( 'imat3' );\r\nexport const umat3 = new ConvertType( 'umat3' );\r\nexport const bmat3 = new ConvertType( 'bmat3' );\r\n\r\nexport const mat4 = new ConvertType( 'mat4' );\r\nexport const imat4 = new ConvertType( 'imat4' );\r\nexport const umat4 = new ConvertType( 'umat4' );\r\nexport const bmat4 = new ConvertType( 'bmat4' );\r\n\r\nexport const string = ( value = '' ) => nodeObject( new ConstNode( value, 'string' ) );\r\nexport const arrayBuffer = ( value ) => nodeObject( new ConstNode( value, 'ArrayBuffer' ) );\r\n\r\naddNodeElement( 'toColor', color );\r\naddNodeElement( 'toFloat', float );\r\naddNodeElement( 'toInt', int );\r\naddNodeElement( 'toUint', uint );\r\naddNodeElement( 'toBool', bool );\r\naddNodeElement( 'toVec2', vec2 );\r\naddNodeElement( 'toIvec2', ivec2 );\r\naddNodeElement( 'toUvec2', uvec2 );\r\naddNodeElement( 'toBvec2', bvec2 );\r\naddNodeElement( 'toVec3', vec3 );\r\naddNodeElement( 'toIvec3', ivec3 );\r\naddNodeElement( 'toUvec3', uvec3 );\r\naddNodeElement( 'toBvec3', bvec3 );\r\naddNodeElement( 'toVec4', vec4 );\r\naddNodeElement( 'toIvec4', ivec4 );\r\naddNodeElement( 'toUvec4', uvec4 );\r\naddNodeElement( 'toBvec4', bvec4 );\r\naddNodeElement( 'toMat2', mat2 );\r\naddNodeElement( 'toImat2', imat2 );\r\naddNodeElement( 'toUmat2', umat2 );\r\naddNodeElement( 'toBmat2', bmat2 );\r\naddNodeElement( 'toMat3', mat3 );\r\naddNodeElement( 'toImat3', imat3 );\r\naddNodeElement( 'toUmat3', umat3 );\r\naddNodeElement( 'toBmat3', bmat3 );\r\naddNodeElement( 'toMat4', mat4 );\r\naddNodeElement( 'toImat4', imat4 );\r\naddNodeElement( 'toUmat4', umat4 );\r\naddNodeElement( 'toBmat4', bmat4 );\r\n\r\n// basic nodes\r\n// HACK - we cannot export them from the corresponding files because of the cyclic dependency\r\nexport const element = nodeProxy( ArrayElementNode );\r\nexport const convert = ( node, types ) => nodeObject( new ConvertNode( nodeObject( node ), types ) );\r\nexport const split = ( node, channels ) => nodeObject( new SplitNode( nodeObject( node ), channels ) );\r\n\r\naddNodeElement( 'element', element );\r\naddNodeElement( 'convert', convert );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass OperatorNode extends TempNode {\r\n\r\n\tconstructor( op, aNode, bNode, ...params ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.op = op;\r\n\r\n\t\tif ( params.length > 0 ) {\r\n\r\n\t\t\tlet finalBNode = bNode;\r\n\r\n\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\r\n\r\n\t\t\t\tfinalBNode = new OperatorNode( op, finalBNode, params[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbNode = finalBNode;\r\n\r\n\t\t}\r\n\r\n\t\tthis.aNode = aNode;\r\n\t\tthis.bNode = bNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder, output ) {\r\n\r\n\t\tconst op = this.op;\r\n\r\n\t\tconst aNode = this.aNode;\r\n\t\tconst bNode = this.bNode;\r\n\r\n\t\tconst typeA = aNode.getNodeType( builder );\r\n\t\tconst typeB = typeof bNode !== 'undefined' ? bNode.getNodeType( builder ) : null;\r\n\r\n\t\tif ( typeA === 'void' || typeB === 'void' ) {\r\n\r\n\t\t\treturn 'void';\r\n\r\n\t\t} else if ( op === '%' ) {\r\n\r\n\t\t\treturn typeA;\r\n\r\n\t\t} else if ( op === '~' || op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<' ) {\r\n\r\n\t\t\treturn builder.getIntegerType( typeA );\r\n\r\n\t\t} else if ( op === '!' || op === '==' || op === '&&' || op === '||' || op === '^^' ) {\r\n\r\n\t\t\treturn 'bool';\r\n\r\n\t\t} else if ( op === '<' || op === '>' || op === '<=' || op === '>=' ) {\r\n\r\n\t\t\tconst typeLength = output ? builder.getTypeLength( output ) : Math.max( builder.getTypeLength( typeA ), builder.getTypeLength( typeB ) );\r\n\r\n\t\t\treturn typeLength > 1 ? `bvec${ typeLength }` : 'bool';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( typeA === 'float' && builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\treturn typeB;\r\n\r\n\t\t\t} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {\r\n\r\n\t\t\t\t// matrix x vector\r\n\r\n\t\t\t\treturn builder.getVectorFromMatrix( typeA );\r\n\r\n\t\t\t} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\t// vector x matrix\r\n\r\n\t\t\t\treturn builder.getVectorFromMatrix( typeB );\r\n\r\n\t\t\t} else if ( builder.getTypeLength( typeB ) > builder.getTypeLength( typeA ) ) {\r\n\r\n\t\t\t\t// anytype x anytype: use the greater length vector\r\n\r\n\t\t\t\treturn typeB;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn typeA;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst op = this.op;\r\n\r\n\t\tconst aNode = this.aNode;\r\n\t\tconst bNode = this.bNode;\r\n\r\n\t\tconst type = this.getNodeType( builder, output );\r\n\r\n\t\tlet typeA = null;\r\n\t\tlet typeB = null;\r\n\r\n\t\tif ( type !== 'void' ) {\r\n\r\n\t\t\ttypeA = aNode.getNodeType( builder );\r\n\t\t\ttypeB = typeof bNode !== 'undefined' ? bNode.getNodeType( builder ) : null;\r\n\r\n\t\t\tif ( op === '<' || op === '>' || op === '<=' || op === '>=' || op === '==' ) {\r\n\r\n\t\t\t\tif ( builder.isVector( typeA ) ) {\r\n\r\n\t\t\t\t\ttypeB = typeA;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttypeA = typeB = 'float';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( op === '>>' || op === '<<' ) {\r\n\r\n\t\t\t\ttypeA = type;\r\n\t\t\t\ttypeB = builder.changeComponentType( typeB, 'uint' );\r\n\r\n\t\t\t} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {\r\n\r\n\t\t\t\t// matrix x vector\r\n\r\n\t\t\t\ttypeB = builder.getVectorFromMatrix( typeA );\r\n\r\n\t\t\t} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\t// vector x matrix\r\n\r\n\t\t\t\ttypeA = builder.getVectorFromMatrix( typeB );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// anytype x anytype\r\n\r\n\t\t\t\ttypeA = typeB = type;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttypeA = typeB = type;\r\n\r\n\t\t}\r\n\r\n\t\tconst a = aNode.build( builder, typeA );\r\n\t\tconst b = typeof bNode !== 'undefined' ? bNode.build( builder, typeB ) : null;\r\n\r\n\t\tconst outputLength = builder.getTypeLength( output );\r\n\t\tconst fnOpSnippet = builder.getFunctionOperator( op );\r\n\r\n\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\tif ( op === '<' && outputLength > 1 ) {\r\n\r\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'lessThan' ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else if ( op === '<=' && outputLength > 1 ) {\r\n\r\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'lessThanEqual' ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else if ( op === '>' && outputLength > 1 ) {\r\n\r\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'greaterThan' ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else if ( op === '>=' && outputLength > 1 ) {\r\n\r\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'greaterThanEqual' ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else if ( op === '!' || op === '~' ) {\r\n\r\n\t\t\t\treturn builder.format( `(${op}${a})`, typeA, output );\r\n\r\n\t\t\t} else if ( fnOpSnippet ) {\r\n\r\n\t\t\t\treturn builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn builder.format( `( ${ a } ${ op } ${ b } )`, type, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( typeA !== 'void' ) {\r\n\r\n\t\t\tif ( fnOpSnippet ) {\r\n\r\n\t\t\t\treturn builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn builder.format( `${ a } ${ op } ${ b }`, type, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.op = this.op;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.op = data.op;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default OperatorNode;\r\n\r\nexport const add = nodeProxy( OperatorNode, '+' );\r\nexport const sub = nodeProxy( OperatorNode, '-' );\r\nexport const mul = nodeProxy( OperatorNode, '*' );\r\nexport const div = nodeProxy( OperatorNode, '/' );\r\nexport const remainder = nodeProxy( OperatorNode, '%' );\r\nexport const equal = nodeProxy( OperatorNode, '==' );\r\nexport const notEqual = nodeProxy( OperatorNode, '!=' );\r\nexport const lessThan = nodeProxy( OperatorNode, '<' );\r\nexport const greaterThan = nodeProxy( OperatorNode, '>' );\r\nexport const lessThanEqual = nodeProxy( OperatorNode, '<=' );\r\nexport const greaterThanEqual = nodeProxy( OperatorNode, '>=' );\r\nexport const and = nodeProxy( OperatorNode, '&&' );\r\nexport const or = nodeProxy( OperatorNode, '||' );\r\nexport const not = nodeProxy( OperatorNode, '!' );\r\nexport const xor = nodeProxy( OperatorNode, '^^' );\r\nexport const bitAnd = nodeProxy( OperatorNode, '&' );\r\nexport const bitNot = nodeProxy( OperatorNode, '~' );\r\nexport const bitOr = nodeProxy( OperatorNode, '|' );\r\nexport const bitXor = nodeProxy( OperatorNode, '^' );\r\nexport const shiftLeft = nodeProxy( OperatorNode, '<<' );\r\nexport const shiftRight = nodeProxy( OperatorNode, '>>' );\r\n\r\naddNodeElement( 'add', add );\r\naddNodeElement( 'sub', sub );\r\naddNodeElement( 'mul', mul );\r\naddNodeElement( 'div', div );\r\naddNodeElement( 'remainder', remainder );\r\naddNodeElement( 'equal', equal );\r\naddNodeElement( 'notEqual', notEqual );\r\naddNodeElement( 'lessThan', lessThan );\r\naddNodeElement( 'greaterThan', greaterThan );\r\naddNodeElement( 'lessThanEqual', lessThanEqual );\r\naddNodeElement( 'greaterThanEqual', greaterThanEqual );\r\naddNodeElement( 'and', and );\r\naddNodeElement( 'or', or );\r\naddNodeElement( 'not', not );\r\naddNodeElement( 'xor', xor );\r\naddNodeElement( 'bitAnd', bitAnd );\r\naddNodeElement( 'bitNot', bitNot );\r\naddNodeElement( 'bitOr', bitOr );\r\naddNodeElement( 'bitXor', bitXor );\r\naddNodeElement( 'shiftLeft', shiftLeft );\r\naddNodeElement( 'shiftRight', shiftRight );\r\n\r\naddNodeClass( 'OperatorNode', OperatorNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { sub, mul, div } from './OperatorNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeObject, nodeProxy, float, vec3, vec4 } from '../shadernode/ShaderNode.js';\r\n\r\nclass MathNode extends TempNode {\r\n\r\n\tconstructor( method, aNode, bNode = null, cNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.method = method;\r\n\r\n\t\tthis.aNode = aNode;\r\n\t\tthis.bNode = bNode;\r\n\t\tthis.cNode = cNode;\r\n\r\n\t}\r\n\r\n\tgetInputType( builder ) {\r\n\r\n\t\tconst aType = this.aNode.getNodeType( builder );\r\n\t\tconst bType = this.bNode ? this.bNode.getNodeType( builder ) : null;\r\n\t\tconst cType = this.cNode ? this.cNode.getNodeType( builder ) : null;\r\n\r\n\t\tconst aLen = builder.isMatrix( aType ) ? 0 : builder.getTypeLength( aType );\r\n\t\tconst bLen = builder.isMatrix( bType ) ? 0 : builder.getTypeLength( bType );\r\n\t\tconst cLen = builder.isMatrix( cType ) ? 0 : builder.getTypeLength( cType );\r\n\r\n\t\tif ( aLen > bLen && aLen > cLen ) {\r\n\r\n\t\t\treturn aType;\r\n\r\n\t\t} else if ( bLen > cLen ) {\r\n\r\n\t\t\treturn bType;\r\n\r\n\t\t} else if ( cLen > aLen ) {\r\n\r\n\t\t\treturn cType;\r\n\r\n\t\t}\r\n\r\n\t\treturn aType;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst method = this.method;\r\n\r\n\t\tif ( method === MathNode.LENGTH || method === MathNode.DISTANCE || method === MathNode.DOT ) {\r\n\r\n\t\t\treturn 'float';\r\n\r\n\t\t} else if ( method === MathNode.CROSS ) {\r\n\r\n\t\t\treturn 'vec3';\r\n\r\n\t\t} else if ( method === MathNode.ALL ) {\r\n\r\n\t\t\treturn 'bool';\r\n\r\n\t\t} else if ( method === MathNode.EQUALS ) {\r\n\r\n\t\t\treturn builder.changeComponentType( this.aNode.getNodeType( builder ), 'bool' );\r\n\r\n\t\t} else if ( method === MathNode.MOD ) {\r\n\r\n\t\t\treturn this.aNode.getNodeType( builder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn this.getInputType( builder );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst method = this.method;\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst inputType = this.getInputType( builder );\r\n\r\n\t\tconst a = this.aNode;\r\n\t\tconst b = this.bNode;\r\n\t\tconst c = this.cNode;\r\n\r\n\t\tconst isWebGL = builder.renderer.isWebGLRenderer === true;\r\n\r\n\t\tif ( method === MathNode.TRANSFORM_DIRECTION ) {\r\n\r\n\t\t\t// dir can be either a direction vector or a normal vector\r\n\t\t\t// upper-left 3x3 of matrix is assumed to be orthogonal\r\n\r\n\t\t\tlet tA = a;\r\n\t\t\tlet tB = b;\r\n\r\n\t\t\tif ( builder.isMatrix( tA.getNodeType( builder ) ) ) {\r\n\r\n\t\t\t\ttB = vec4( vec3( tB ), 0.0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttA = vec4( vec3( tA ), 0.0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst mulNode = mul( tA, tB ).xyz;\r\n\r\n\t\t\treturn normalize( mulNode ).build( builder, output );\r\n\r\n\t\t} else if ( method === MathNode.NEGATE ) {\r\n\r\n\t\t\treturn builder.format( '( - ' + a.build( builder, inputType ) + ' )', type, output );\r\n\r\n\t\t} else if ( method === MathNode.ONE_MINUS ) {\r\n\r\n\t\t\treturn sub( 1.0, a ).build( builder, output );\r\n\r\n\t\t} else if ( method === MathNode.RECIPROCAL ) {\r\n\r\n\t\t\treturn div( 1.0, a ).build( builder, output );\r\n\r\n\t\t} else if ( method === MathNode.DIFFERENCE ) {\r\n\r\n\t\t\treturn abs( sub( a, b ) ).build( builder, output );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst params = [];\r\n\r\n\t\t\tif ( method === MathNode.CROSS || method === MathNode.MOD ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, type ),\r\n\t\t\t\t\tb.build( builder, type )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( method === MathNode.STEP ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, builder.getTypeLength( a.getNodeType( builder ) ) === 1 ? 'float' : inputType ),\r\n\t\t\t\t\tb.build( builder, inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( ( isWebGL && ( method === MathNode.MIN || method === MathNode.MAX ) ) || method === MathNode.MOD ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, builder.getTypeLength( b.getNodeType( builder ) ) === 1 ? 'float' : inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( method === MathNode.REFRACT ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, inputType ),\r\n\t\t\t\t\tc.build( builder, 'float' )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( method === MathNode.MIX ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, inputType ),\r\n\t\t\t\t\tc.build( builder, builder.getTypeLength( c.getNodeType( builder ) ) === 1 ? 'float' : inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tparams.push( a.build( builder, inputType ) );\r\n\t\t\t\tif ( b !== null ) params.push( b.build( builder, inputType ) );\r\n\t\t\t\tif ( c !== null ) params.push( c.build( builder, inputType ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn builder.format( `${ builder.getMethod( method, type ) }( ${params.join( ', ' )} )`, type, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.method = this.method;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.method = data.method;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// 1 input\r\n\r\nMathNode.ALL = 'all';\r\nMathNode.ANY = 'any';\r\nMathNode.EQUALS = 'equals';\r\n\r\nMathNode.RADIANS = 'radians';\r\nMathNode.DEGREES = 'degrees';\r\nMathNode.EXP = 'exp';\r\nMathNode.EXP2 = 'exp2';\r\nMathNode.LOG = 'log';\r\nMathNode.LOG2 = 'log2';\r\nMathNode.SQRT = 'sqrt';\r\nMathNode.INVERSE_SQRT = 'inversesqrt';\r\nMathNode.FLOOR = 'floor';\r\nMathNode.CEIL = 'ceil';\r\nMathNode.NORMALIZE = 'normalize';\r\nMathNode.FRACT = 'fract';\r\nMathNode.SIN = 'sin';\r\nMathNode.COS = 'cos';\r\nMathNode.TAN = 'tan';\r\nMathNode.ASIN = 'asin';\r\nMathNode.ACOS = 'acos';\r\nMathNode.ATAN = 'atan';\r\nMathNode.ABS = 'abs';\r\nMathNode.SIGN = 'sign';\r\nMathNode.LENGTH = 'length';\r\nMathNode.NEGATE = 'negate';\r\nMathNode.ONE_MINUS = 'oneMinus';\r\nMathNode.DFDX = 'dFdx';\r\nMathNode.DFDY = 'dFdy';\r\nMathNode.ROUND = 'round';\r\nMathNode.RECIPROCAL = 'reciprocal';\r\nMathNode.TRUNC = 'trunc';\r\nMathNode.FWIDTH = 'fwidth';\r\nMathNode.BITCAST = 'bitcast';\r\n\r\n// 2 inputs\r\n\r\nMathNode.ATAN2 = 'atan2';\r\nMathNode.MIN = 'min';\r\nMathNode.MAX = 'max';\r\nMathNode.MOD = 'mod';\r\nMathNode.STEP = 'step';\r\nMathNode.REFLECT = 'reflect';\r\nMathNode.DISTANCE = 'distance';\r\nMathNode.DIFFERENCE = 'difference';\r\nMathNode.DOT = 'dot';\r\nMathNode.CROSS = 'cross';\r\nMathNode.POW = 'pow';\r\nMathNode.TRANSFORM_DIRECTION = 'transformDirection';\r\n\r\n// 3 inputs\r\n\r\nMathNode.MIX = 'mix';\r\nMathNode.CLAMP = 'clamp';\r\nMathNode.REFRACT = 'refract';\r\nMathNode.SMOOTHSTEP = 'smoothstep';\r\nMathNode.FACEFORWARD = 'faceforward';\r\n\r\nexport default MathNode;\r\n\r\nexport const EPSILON = float( 1e-6 );\r\nexport const INFINITY = float( 1e6 );\r\nexport const PI = float( Math.PI );\r\nexport const PI2 = float( Math.PI * 2 );\r\n\r\nexport const all = nodeProxy( MathNode, MathNode.ALL );\r\nexport const any = nodeProxy( MathNode, MathNode.ANY );\r\nexport const equals = nodeProxy( MathNode, MathNode.EQUALS );\r\n\r\nexport const radians = nodeProxy( MathNode, MathNode.RADIANS );\r\nexport const degrees = nodeProxy( MathNode, MathNode.DEGREES );\r\nexport const exp = nodeProxy( MathNode, MathNode.EXP );\r\nexport const exp2 = nodeProxy( MathNode, MathNode.EXP2 );\r\nexport const log = nodeProxy( MathNode, MathNode.LOG );\r\nexport const log2 = nodeProxy( MathNode, MathNode.LOG2 );\r\nexport const sqrt = nodeProxy( MathNode, MathNode.SQRT );\r\nexport const inverseSqrt = nodeProxy( MathNode, MathNode.INVERSE_SQRT );\r\nexport const floor = nodeProxy( MathNode, MathNode.FLOOR );\r\nexport const ceil = nodeProxy( MathNode, MathNode.CEIL );\r\nexport const normalize = nodeProxy( MathNode, MathNode.NORMALIZE );\r\nexport const fract = nodeProxy( MathNode, MathNode.FRACT );\r\nexport const sin = nodeProxy( MathNode, MathNode.SIN );\r\nexport const cos = nodeProxy( MathNode, MathNode.COS );\r\nexport const tan = nodeProxy( MathNode, MathNode.TAN );\r\nexport const asin = nodeProxy( MathNode, MathNode.ASIN );\r\nexport const acos = nodeProxy( MathNode, MathNode.ACOS );\r\nexport const atan = nodeProxy( MathNode, MathNode.ATAN );\r\nexport const abs = nodeProxy( MathNode, MathNode.ABS );\r\nexport const sign = nodeProxy( MathNode, MathNode.SIGN );\r\nexport const length = nodeProxy( MathNode, MathNode.LENGTH );\r\nexport const negate = nodeProxy( MathNode, MathNode.NEGATE );\r\nexport const oneMinus = nodeProxy( MathNode, MathNode.ONE_MINUS );\r\nexport const dFdx = nodeProxy( MathNode, MathNode.DFDX );\r\nexport const dFdy = nodeProxy( MathNode, MathNode.DFDY );\r\nexport const round = nodeProxy( MathNode, MathNode.ROUND );\r\nexport const reciprocal = nodeProxy( MathNode, MathNode.RECIPROCAL );\r\nexport const trunc = nodeProxy( MathNode, MathNode.TRUNC );\r\nexport const fwidth = nodeProxy( MathNode, MathNode.FWIDTH );\r\nexport const bitcast = nodeProxy( MathNode, MathNode.BITCAST );\r\n\r\nexport const atan2 = nodeProxy( MathNode, MathNode.ATAN2 );\r\nexport const min = nodeProxy( MathNode, MathNode.MIN );\r\nexport const max = nodeProxy( MathNode, MathNode.MAX );\r\nexport const mod = nodeProxy( MathNode, MathNode.MOD );\r\nexport const step = nodeProxy( MathNode, MathNode.STEP );\r\nexport const reflect = nodeProxy( MathNode, MathNode.REFLECT );\r\nexport const distance = nodeProxy( MathNode, MathNode.DISTANCE );\r\nexport const difference = nodeProxy( MathNode, MathNode.DIFFERENCE );\r\nexport const dot = nodeProxy( MathNode, MathNode.DOT );\r\nexport const cross = nodeProxy( MathNode, MathNode.CROSS );\r\nexport const pow = nodeProxy( MathNode, MathNode.POW );\r\nexport const pow2 = nodeProxy( MathNode, MathNode.POW, 2 );\r\nexport const pow3 = nodeProxy( MathNode, MathNode.POW, 3 );\r\nexport const pow4 = nodeProxy( MathNode, MathNode.POW, 4 );\r\nexport const transformDirection = nodeProxy( MathNode, MathNode.TRANSFORM_DIRECTION );\r\n\r\nexport const cbrt = ( a ) => mul( sign( a ), pow( abs( a ), 1.0 / 3.0 ) );\r\nexport const lengthSq = ( a ) => dot( a, a );\r\nexport const mix = nodeProxy( MathNode, MathNode.MIX );\r\nexport const clamp = ( value, low = 0, high = 1 ) => nodeObject( new MathNode( MathNode.CLAMP, nodeObject( value ), nodeObject( low ), nodeObject( high ) ) );\r\nexport const saturate = ( value ) => clamp( value );\r\nexport const refract = nodeProxy( MathNode, MathNode.REFRACT );\r\nexport const smoothstep = nodeProxy( MathNode, MathNode.SMOOTHSTEP );\r\nexport const faceForward = nodeProxy( MathNode, MathNode.FACEFORWARD );\r\n\r\nexport const mixElement = ( t, e1, e2 ) => mix( e1, e2, t );\r\nexport const smoothstepElement = ( x, low, high ) => smoothstep( low, high, x );\r\n\r\naddNodeElement( 'all', all );\r\naddNodeElement( 'any', any );\r\naddNodeElement( 'equals', equals );\r\n\r\naddNodeElement( 'radians', radians );\r\naddNodeElement( 'degrees', degrees );\r\naddNodeElement( 'exp', exp );\r\naddNodeElement( 'exp2', exp2 );\r\naddNodeElement( 'log', log );\r\naddNodeElement( 'log2', log2 );\r\naddNodeElement( 'sqrt', sqrt );\r\naddNodeElement( 'inverseSqrt', inverseSqrt );\r\naddNodeElement( 'floor', floor );\r\naddNodeElement( 'ceil', ceil );\r\naddNodeElement( 'normalize', normalize );\r\naddNodeElement( 'fract', fract );\r\naddNodeElement( 'sin', sin );\r\naddNodeElement( 'cos', cos );\r\naddNodeElement( 'tan', tan );\r\naddNodeElement( 'asin', asin );\r\naddNodeElement( 'acos', acos );\r\naddNodeElement( 'atan', atan );\r\naddNodeElement( 'abs', abs );\r\naddNodeElement( 'sign', sign );\r\naddNodeElement( 'length', length );\r\naddNodeElement( 'lengthSq', lengthSq );\r\naddNodeElement( 'negate', negate );\r\naddNodeElement( 'oneMinus', oneMinus );\r\naddNodeElement( 'dFdx', dFdx );\r\naddNodeElement( 'dFdy', dFdy );\r\naddNodeElement( 'round', round );\r\naddNodeElement( 'reciprocal', reciprocal );\r\naddNodeElement( 'trunc', trunc );\r\naddNodeElement( 'fwidth', fwidth );\r\naddNodeElement( 'atan2', atan2 );\r\naddNodeElement( 'min', min );\r\naddNodeElement( 'max', max );\r\naddNodeElement( 'mod', mod );\r\naddNodeElement( 'step', step );\r\naddNodeElement( 'reflect', reflect );\r\naddNodeElement( 'distance', distance );\r\naddNodeElement( 'dot', dot );\r\naddNodeElement( 'cross', cross );\r\naddNodeElement( 'pow', pow );\r\naddNodeElement( 'pow2', pow2 );\r\naddNodeElement( 'pow3', pow3 );\r\naddNodeElement( 'pow4', pow4 );\r\naddNodeElement( 'transformDirection', transformDirection );\r\naddNodeElement( 'mix', mixElement );\r\naddNodeElement( 'clamp', clamp );\r\naddNodeElement( 'refract', refract );\r\naddNodeElement( 'smoothstep', smoothstepElement );\r\naddNodeElement( 'faceForward', faceForward );\r\naddNodeElement( 'difference', difference );\r\naddNodeElement( 'saturate', saturate );\r\naddNodeElement( 'cbrt', cbrt );\r\n\r\naddNodeClass( 'MathNode', MathNode );\r\n"],
  "mappings": "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",
  "names": ["data", "length", "nodeObject", "bool", "uint", "int", "float"]
}
