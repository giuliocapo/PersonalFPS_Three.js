import {
  dot,
  mix
} from "./chunk-AJBVCUPC.js";
import {
  add
} from "./chunk-74K5VZHW.js";
import {
  TempNode_default,
  addNodeClass,
  addNodeElement,
  float,
  nodeProxy,
  tslFn,
  vec3
} from "./chunk-ROSZ3DPH.js";
import "./chunk-NZGOFXLP.js";

// node_modules/three/examples/jsm/nodes/display/ColorAdjustmentNode.js
var saturationNode = tslFn(({ color, adjustment }) => {
  return adjustment.mix(luminance(color.rgb), color.rgb);
});
var vibranceNode = tslFn(({ color, adjustment }) => {
  const average = add(color.r, color.g, color.b).div(3);
  const mx = color.r.max(color.g.max(color.b));
  const amt = mx.sub(average).mul(adjustment).mul(-3);
  return mix(color.rgb, mx, amt);
});
var hueNode = tslFn(({ color, adjustment }) => {
  const k = vec3(0.57735, 0.57735, 0.57735);
  const cosAngle = adjustment.cos();
  return vec3(color.rgb.mul(cosAngle).add(k.cross(color.rgb).mul(adjustment.sin()).add(k.mul(dot(k, color.rgb).mul(cosAngle.oneMinus())))));
});
var ColorAdjustmentNode = class _ColorAdjustmentNode extends TempNode_default {
  constructor(method, colorNode, adjustmentNode = float(1)) {
    super("vec3");
    this.method = method;
    this.colorNode = colorNode;
    this.adjustmentNode = adjustmentNode;
  }
  setup() {
    const { method, colorNode, adjustmentNode } = this;
    const callParams = { color: colorNode, adjustment: adjustmentNode };
    let outputNode = null;
    if (method === _ColorAdjustmentNode.SATURATION) {
      outputNode = saturationNode(callParams);
    } else if (method === _ColorAdjustmentNode.VIBRANCE) {
      outputNode = vibranceNode(callParams);
    } else if (method === _ColorAdjustmentNode.HUE) {
      outputNode = hueNode(callParams);
    } else {
      console.error(`${this.type}: Method "${this.method}" not supported!`);
    }
    return outputNode;
  }
};
ColorAdjustmentNode.SATURATION = "saturation";
ColorAdjustmentNode.VIBRANCE = "vibrance";
ColorAdjustmentNode.HUE = "hue";
var ColorAdjustmentNode_default = ColorAdjustmentNode;
var saturation = nodeProxy(ColorAdjustmentNode, ColorAdjustmentNode.SATURATION);
var vibrance = nodeProxy(ColorAdjustmentNode, ColorAdjustmentNode.VIBRANCE);
var hue = nodeProxy(ColorAdjustmentNode, ColorAdjustmentNode.HUE);
var lumaCoeffs = vec3(0.2125, 0.7154, 0.0721);
var luminance = (color, luma = lumaCoeffs) => dot(color, luma);
var threshold = (color, threshold2) => mix(vec3(0), color, luminance(color).sub(threshold2).max(0));
addNodeElement("saturation", saturation);
addNodeElement("vibrance", vibrance);
addNodeElement("hue", hue);
addNodeElement("threshold", threshold);
addNodeClass("ColorAdjustmentNode", ColorAdjustmentNode);
export {
  ColorAdjustmentNode_default as default,
  hue,
  lumaCoeffs,
  luminance,
  saturation,
  threshold,
  vibrance
};
//# sourceMappingURL=three_examples_jsm_nodes_display_ColorAdjustmentNode.js.map
